{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAeC,SAASC,cAAe,kBACvCC,EAAYF,SAASC,cAAe,SACtCE,EAAcH,SAASI,iBAAkB,SACzCC,EAAc,GACdC,EAAe,EACfC,EAAU,CAAEC,WAAY,EAAGC,UAAW,GACtCC,GAAoB,EAYpBC,EAAmB,SAAAC,G,OAAUb,EAAac,SAAWD,C,EAiBzD,IAAIE,EAAe,WACjBP,EAAQE,UAAYM,YAAW,WAC7BL,GAAoB,EACpBM,IACAC,G,GACCZ,EAAYa,M,EAKbD,EAAgB,WAClBV,EAAQC,WAAaW,aAAY,WAC/BH,G,GACCX,EAAYe,K,EAKbJ,EAAgB,aAClBV,GACoBD,EAAYgB,OACRC,KAAKC,SAAW,IAEpCC,QAAQC,IAAK,MACbC,EAAA7B,GAAS8B,OAAOC,QACd,qBAAwCC,OAAnBvB,EAAa,QAAuBuB,OAAjBxB,EAAYe,KAAK,SAG3DI,QAAQC,IAAK,UACbC,EAAA7B,GAAS8B,OAAOG,QACd,oBAAuCD,OAAnBvB,EAAa,QAAuBuB,OAAjBxB,EAAYe,KAAK,SAI5DW,IACArB,GAAoB,EACpBC,GAAiB,G,EAIjBoB,EAAgB,WAClBC,aAAazB,EAAQC,YACrByB,cAAc1B,EAAQE,U,EAgBxBV,EAAamC,iBAAkB,SAvE/B,WACEC,MAAMC,iBACF1B,IAbJP,EAAYkC,SACV,SAAAC,G,OAASjC,EAAYiC,EAAKC,aAAc,SAAUD,EAAK1B,K,IAgBzDN,EAAe,EACfyB,IACAjB,I,IAgEFZ,EAAUgC,iBAAkB,UAZ5B,W,IACOM,GAAa,EAAbC,GAAa,EAAbC,OAAaC,E,IAAlB,QAAKC,EAAAC,EAAiB1C,EAAW2C,OAAAC,cAA5BP,GAAAI,EAAAC,EAAaG,QAAAC,MAAbT,GAAa,EAAiB,CAA9B,IAAMU,EAANN,EAAahC,MAChB,GAAIsC,EAAQtC,MAAQ,GAAuB,KAAlBsC,EAAQtC,MAC/B,OAAOD,GAAiB,E,WAFvB8B,GAAa,EAAbC,EAAaS,C,aAAbX,GAAa,MAAbK,EAAaO,QAAbP,EAAaO,Q,YAAbX,E,MAAAC,C,EAKL,OAAO/B,GAAiB,E,IAU1BA,GAAiB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst resultButton = document.querySelector(`.form > button`);\nconst delayForm = document.querySelector(`.form`);\nlet delayFields = document.querySelectorAll(`input`);\nlet delayObject = {};\nlet amountRepeat = 0;\nlet timerId = { intervalId: 0, timeoutId: 0 };\nlet promisesExecuting = false; // Flag to track promise execution status\n\n// Create new Object with delay property\n\nlet getDelayObject = () => {\n  delayFields.forEach(\n    elem => (delayObject[elem.getAttribute(`name`)] = elem.value)\n  );\n};\n\n// Change button status\n\nlet resultBtnIsBlock = value => (resultButton.disabled = value);\n\n// Main mainController\n\nfunction mainController() {\n  event.preventDefault();\n  if (promisesExecuting) {\n    return; // If promises are already executing, do not proceed\n  }\n  getDelayObject();\n  amountRepeat = 0;\n  cleaningTimer();\n  startTimeout();\n}\n\n// First stage (first timeout delay)\n\nlet startTimeout = () => {\n  timerId.timeoutId = setTimeout(() => {\n    promisesExecuting = true; // Set the flag to indicate promises are executing\n    createPromise();\n    startInterval();\n  }, delayObject.delay);\n};\n\n// Second stage (setInterval)\n\nlet startInterval = () => {\n  timerId.intervalId = setInterval(() => {\n    createPromise();\n  }, delayObject.step);\n};\n\n// Check terms;\n\nlet createPromise = () => {\n  amountRepeat++;\n  if (amountRepeat <= delayObject.amount) {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      console.log(`ok`);\n      Notiflix.Notify.success(\n        `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    } else {\n      console.log(`not ok`);\n      Notiflix.Notify.failure(\n        `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    }\n  } else {\n    cleaningTimer();\n    promisesExecuting = false; // Reset the flag when all promises are executed\n    resultBtnIsBlock(false); // Enable the button when promises are done\n  }\n};\n\nlet cleaningTimer = () => {\n  clearTimeout(timerId.intervalId);\n  clearInterval(timerId.timeoutId);\n};\n\n// Check validation\n\nfunction changeController() {\n  for (const element of delayFields) {\n    if (element.value < 0 || element.value === '') {\n      return resultBtnIsBlock(true);\n    }\n  }\n  return resultBtnIsBlock(false);\n}\n\n// Event Listeners\n\nresultButton.addEventListener(`click`, mainController);\ndelayForm.addEventListener(`change`, changeController);\n\n// Main\n\nresultBtnIsBlock(true);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$resultButton","document","querySelector","$ce04d3a99e08e73b$var$delayForm","$ce04d3a99e08e73b$var$delayFields","querySelectorAll","$ce04d3a99e08e73b$var$delayObject","$ce04d3a99e08e73b$var$amountRepeat","$ce04d3a99e08e73b$var$timerId","intervalId","timeoutId","$ce04d3a99e08e73b$var$promisesExecuting","$ce04d3a99e08e73b$var$resultBtnIsBlock","value","disabled","$ce04d3a99e08e73b$var$startTimeout","setTimeout","$ce04d3a99e08e73b$var$createPromise","$ce04d3a99e08e73b$var$startInterval","delay","setInterval","step","amount","Math","random","console","log","$parcel$interopDefault","Notify","success","concat","failure","$ce04d3a99e08e73b$var$cleaningTimer","clearTimeout","clearInterval","addEventListener","event","preventDefault","forEach","elem","getAttribute","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","err","return"],"version":3,"file":"03-promises.197da091.js.map"}