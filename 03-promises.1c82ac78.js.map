{"mappings":"qhBAkFA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAEN,MAAMC,EAAaC,KAAKL,cAAc,uBAChCM,EAAYD,KAAKL,cAAc,sBAC/BO,EAAcF,KAAKL,cAAc,wBAEjCQ,EAAQC,SAASL,EAAWM,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEpC,GAAKG,MAAML,IAAWK,MAAMF,IAAUE,MAAMD,GAW1CE,EAAA3B,GAAS4B,OAAOC,QAAQ,0DAVxB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,IAC3B5B,EAAc4B,EAAGT,GAASS,EAAI,GAAKN,GAChCO,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOI,QAAQ,uBAAqB7B,QAAiBC,MAAU,IAEzE6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOM,QAAQ,sBAAoB/B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["\n\n// import Notiflix from 'notiflix';\n\n// const resultButton = document.querySelector('.form > button');\n// const delayForm = document.querySelector('.form');\n// const delayFields = document.querySelectorAll('input');\n// const delayObject = {};\n// let amountRepeat = 0;\n// const timerId = { intervalId: 0, timeoutId: 0 };\n\n// const getDelayObject = () => {\n//   delayFields.forEach(\n//     element => (delayObject[element.getAttribute('name')] = element.value)\n//   );\n// };\n\n// const setResultButtonDisabled = value => (resultButton.disabled = value);\n\n// function mainController(event) {\n//   event.preventDefault();\n//   getDelayObject();\n//   amountRepeat = 0;\n//   clearTimers();\n//   startTimeout();\n//   setResultButtonDisabled(true); // Disable the button immediately\n// }\n\n// const startTimeout = () => {\n//   timerId.timeoutId = setTimeout(() => {\n//     createPromise();\n//     startInterval();\n//     setResultButtonDisabled(false); // Enable the button after the promises are started\n//   }, delayObject.delay);\n// };\n\n// const startInterval = () => {\n//   timerId.intervalId = setInterval(() => {\n//     createPromise();\n//   }, delayObject.step);\n// };\n\n// const createPromise = () => {\n//   amountRepeat++;\n//   if (amountRepeat <= delayObject.amount) {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       console.log('ok');\n//       Notiflix.Notify.success(\n//         `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     } else {\n//       console.log('not ok');\n//       Notiflix.Notify.failure(\n//         `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     }\n//   } else {\n//     clearTimers();\n//   }\n// };\n\n// const clearTimers = () => {\n//   clearTimeout(timerId.intervalId);\n//   clearInterval(timerId.timeoutId);\n// };\n\n// function changeController() {\n//   for (const element of delayFields) {\n//     if (element.value < 0 || element.value === '') {\n//       return setResultButtonDisabled(true);\n//     }\n//   }\n//   return setResultButtonDisabled(false);\n// }\n\n// resultButton.addEventListener('click', mainController);\n// delayForm.addEventListener('change', changeController);\n\n// setResultButtonDisabled(true);\n// js/03-promises.js\n\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const delayInput = this.querySelector('input[name=\"delay\"]');\n  const stepInput = this.querySelector('input[name=\"step\"]');\n  const amountInput = this.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (!isNaN(delay) && !isNaN(step) && !isNaN(amount)) {\n    for (let i = 1; i <= amount; i++) {\n      createPromise(i, delay + (i - 1) * step)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.Failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  } else {\n    Notiflix.Notify.Warning('Please fill in all the fields with valid numbers.');\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","this","stepInput","amountInput","delay1","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","Warning","i","then","Success","catch","Failure"],"version":3,"file":"03-promises.1c82ac78.js.map"}