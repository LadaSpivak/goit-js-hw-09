{"mappings":"qhBAgFA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,kBACtCC,EAAYF,SAASC,cAAc,SACzC,IAAIE,EAAcH,SAASI,iBAAiB,SACxCC,EAAc,GACdC,EAAe,EACfC,EAAU,CAAEC,WAAY,EAAGC,UAAW,GAQtCC,EAAmBC,GAAUZ,EAAaa,SAAWD,EAWzD,IAAIE,EAAe,KACjBN,EAAQE,UAAYK,YAAW,KAC7BC,IACAC,GAAe,GACdX,EAAYY,MAAM,EAGnBD,EAAgB,KAClBT,EAAQC,WAAaU,aAAY,KAC/BH,GAAe,GACdV,EAAYc,KAAK,EAGlBJ,EAAgB,KAElB,GADAT,IACIA,GAAgBD,EAAYe,OAAQ,CAChBC,KAAKC,SAAW,IAEpCC,QAAQC,IAAI,MACZC,EAAA5B,GAAS6B,OAAOC,QACd,qBAAqBrB,QAAmBD,EAAYc,YAGtDI,QAAQC,IAAI,UACZC,EAAA5B,GAAS6B,OAAOE,QACd,oBAAoBtB,QAAmBD,EAAYc,U,MAIvDU,IACAnB,GAAiB,E,EAIjBmB,EAAgB,KAClBC,aAAavB,EAAQC,YACrBuB,cAAcxB,EAAQE,UAAU,EAYlCV,EAAaiC,iBAAiB,SAzD9B,WACEC,MAAMC,iBARN/B,EAAYgC,SACVC,GAAS/B,EAAY+B,EAAKC,aAAa,SAAWD,EAAKzB,QASzDL,EAAe,EACfuB,IACAhB,IACAH,GAAiB,E,IAoDnBR,EAAU8B,iBAAiB,SAV3B,WACE,IAAK,MAAMM,KAAWnC,EACpB,GAAImC,EAAQ3B,MAAQ,GAAsB,IAAjB2B,EAAQ3B,MAC/B,OAAOD,GAAiB,GAG5BA,GAAiB,E,IAMnBA,GAAiB","sources":["src/js/03-promises.js"],"sourcesContent":["\n\n// import Notiflix from 'notiflix';\n\n// const resultButton = document.querySelector('.form > button');\n// const delayForm = document.querySelector('.form');\n// const delayFields = document.querySelectorAll('input');\n// const delayObject = {};\n// let amountRepeat = 0;\n// const timerId = { intervalId: 0, timeoutId: 0 };\n\n// const getDelayObject = () => {\n//   delayFields.forEach(\n//     element => (delayObject[element.getAttribute('name')] = element.value)\n//   );\n// };\n\n// const setResultButtonDisabled = value => (resultButton.disabled = value);\n\n// function mainController(event) {\n//   event.preventDefault();\n//   getDelayObject();\n//   amountRepeat = 0;\n//   clearTimers();\n//   startTimeout();\n//   setResultButtonDisabled(true); // Disable the button immediately\n// }\n\n// const startTimeout = () => {\n//   timerId.timeoutId = setTimeout(() => {\n//     createPromise();\n//     startInterval();\n//     setResultButtonDisabled(false); // Enable the button after the promises are started\n//   }, delayObject.delay);\n// };\n\n// const startInterval = () => {\n//   timerId.intervalId = setInterval(() => {\n//     createPromise();\n//   }, delayObject.step);\n// };\n\n// const createPromise = () => {\n//   amountRepeat++;\n//   if (amountRepeat <= delayObject.amount) {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       console.log('ok');\n//       Notiflix.Notify.success(\n//         `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     } else {\n//       console.log('not ok');\n//       Notiflix.Notify.failure(\n//         `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     }\n//   } else {\n//     clearTimers();\n//   }\n// };\n\n// const clearTimers = () => {\n//   clearTimeout(timerId.intervalId);\n//   clearInterval(timerId.timeoutId);\n// };\n\n// function changeController() {\n//   for (const element of delayFields) {\n//     if (element.value < 0 || element.value === '') {\n//       return setResultButtonDisabled(true);\n//     }\n//   }\n//   return setResultButtonDisabled(false);\n// }\n\n// resultButton.addEventListener('click', mainController);\n// delayForm.addEventListener('change', changeController);\n\n// setResultButtonDisabled(true);\nimport Notiflix from 'notiflix';\n\nconst resultButton = document.querySelector(`.form > button`);\nconst delayForm = document.querySelector(`.form`);\nlet delayFields = document.querySelectorAll(`input`);\nlet delayObject = {};\nlet amountRepeat = 0;\nlet timerId = { intervalId: 0, timeoutId: 0 };\n\nlet getDelayObject = () => {\n  delayFields.forEach(\n    elem => (delayObject[elem.getAttribute(`name`)] = elem.value)\n  );\n};\n\nlet resultBtnIsBlock = value => (resultButton.disabled = value);\n\nfunction mainController() {\n  event.preventDefault();\n  getDelayObject();\n  amountRepeat = 0;\n  cleaningTimer();\n  startTimeout();\n  resultBtnIsBlock(true); // Disable the button when promises start\n}\n\nlet startTimeout = () => {\n  timerId.timeoutId = setTimeout(() => {\n    createPromise();\n    startInterval();\n  }, delayObject.delay);\n};\n\nlet startInterval = () => {\n  timerId.intervalId = setInterval(() => {\n    createPromise();\n  }, delayObject.step);\n};\n\nlet createPromise = () => {\n  amountRepeat++;\n  if (amountRepeat <= delayObject.amount) {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      console.log(`ok`);\n      Notiflix.Notify.success(\n        `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    } else {\n      console.log(`not ok`);\n      Notiflix.Notify.failure(\n        `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    }\n  } else {\n    cleaningTimer();\n    resultBtnIsBlock(false); // Re-enable the button when promises are completed\n  }\n};\n\nlet cleaningTimer = () => {\n  clearTimeout(timerId.intervalId);\n  clearInterval(timerId.timeoutId);\n};\n\nfunction changeController() {\n  for (const element of delayFields) {\n    if (element.value < 0 || element.value == ``) {\n      return resultBtnIsBlock(true);\n    }\n  }\n  resultBtnIsBlock(false); // Re-enable the button when valid values are entered\n}\n\nresultButton.addEventListener(`click`, mainController);\ndelayForm.addEventListener(`input`, changeController); // Use 'input' event for immediate validation\n\nresultBtnIsBlock(true);\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$resultButton","document","querySelector","$47d4ff9957288465$var$delayForm","$47d4ff9957288465$var$delayFields","querySelectorAll","$47d4ff9957288465$var$delayObject","$47d4ff9957288465$var$amountRepeat","$47d4ff9957288465$var$timerId","intervalId","timeoutId","$47d4ff9957288465$var$resultBtnIsBlock","value","disabled","$47d4ff9957288465$var$startTimeout","setTimeout","$47d4ff9957288465$var$createPromise","$47d4ff9957288465$var$startInterval","delay","setInterval","step","amount","Math","random","console","log","$parcel$interopDefault","Notify","success","failure","$47d4ff9957288465$var$cleaningTimer","clearTimeout","clearInterval","addEventListener","event","preventDefault","forEach","elem","getAttribute","element"],"version":3,"file":"03-promises.2760b731.js.map"}