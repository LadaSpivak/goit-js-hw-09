{"mappings":"qhBAyGA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,kBACtCC,EAAYF,SAASC,cAAc,SACnCE,EAAcH,SAASI,iBAAiB,SAC9C,IAAIC,EAAc,GACdC,EAAU,CAAEC,WAAY,EAAGC,UAAW,GAM1C,SAASC,EAAiBC,GACxBX,EAAaY,SAAWD,C,CA0D1BX,EAAaa,iBAAiB,SAvD9B,SAAwBC,GACtBA,EAAMC,iBARNX,EAAYY,SAAQC,GAASX,EAAYW,EAAKC,aAAa,SAAWD,EAAKN,QAiD3EQ,aAAaZ,EAAQC,YACrBW,aAAaZ,EAAQE,WAlCrBF,EAAQE,UAAYW,YAAW,KAM/Bb,EAAQC,WAAaa,aAAY,KAM1B,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCP,YAAW,KACLK,EACFF,IAEAC,GAAQ,GAETlB,EAAYsB,KAAK,IAEnBC,MAAK,KACJC,QAAQC,IAAI,uBACZC,EAAAlC,GAASmC,OAAOC,QAAQ,wBAAwB5B,EAAYsB,SAAS,IAEtEO,OAAM,KACLL,QAAQC,IAAI,sBACZC,EAAAlC,GAASmC,OAAOG,QAAQ,uBAAuB9B,EAAYsB,SAAS,GArBvD,GACdtB,EAAYsB,KAPE,GACdtB,EAAY+B,OANf3B,GAAiB,E,IAmDnBP,EAAUU,iBAAiB,SAV3B,WACE,IAAK,MAAMyB,KAAWlC,EACpB,GAAIkC,EAAQ3B,MAAQ,GAAuB,KAAlB2B,EAAQ3B,MAC/B,OAAOD,GAAiB,GAG5BA,GAAiB,E,IAMnBA,GAAiB","sources":["src/js/03-promises.js"],"sourcesContent":["\n// import { reject } from 'lodash';\n// import Notiflix from 'notiflix';\n\n// const resultButton = document.querySelector(`.form > button`);\n// const delayForm = document.querySelector(`.form`);\n// let delayFields = document.querySelectorAll(`input`);\n// let delayObject = {};\n// let amountRepeat = 0;\n// let timerId = { intervalId: 0, timeoutId: 0 };\n\n// let getDelayObject = () => {\n//   delayFields.forEach(\n//     elem => (delayObject[elem.getAttribute(`name`)] = elem.value)\n//   );\n// };\n\n// let resultBtnIsBlock = value => (resultButton.disabled = value);\n\n// function mainController() {\n//   event.preventDefault();\n//   getDelayObject();\n//   amountRepeat = 0;\n//   cleaningTimer();\n//   startTimeout();\n//   resultBtnIsBlock(true); // Disable the button when promises start\n// }\n\n// let startTimeout = () => {\n//   timerId.timeoutId = setTimeout(() => {\n//     createPromise();\n//     startInterval();\n//   }, delayObject.delay);\n// };\n\n// let startInterval = () => {\n//   timerId.intervalId = setInterval(() => {\n//     createPromise();\n//   }, delayObject.step);\n// };\n\n// let createPromise = (position, delay) => {\n//   return new Promise ((resolve, reject)) => {\n//     const shouldResolve = Math.random()> 0.3;\n//     setTimeout(() => { \n//       if (shouldResolve){\n//         resolve({position, delay})\n//       } else {\n//         reject ({position, delay})\n//       }\n//     }, delay) \n//   }\n// }\n\n\n//   if (amountRepeat <= delayObject.amount) {\n   \n//     if (shouldResolve) {\n//       console.log(`ok`);\n//       Notiflix.Notify.success(\n//         `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     } else {\n//       console.log(`not ok`);\n//       Notiflix.Notify.failure(\n//         `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     }\n//   } else {\n//     cleaningTimer();\n//     resultBtnIsBlock(false); // Re-enable the button when promises are completed\n//   }\n// ;\n\n\n// let cleaningTimer = () => {\n//   clearTimeout(timerId.intervalId);\n//   clearInterval(timerId.timeoutId);\n// };\n\n// function changeController() {\n//   for (const element of delayFields) {\n//     if (element.value < 0 || element.value == ``) {\n//       return resultBtnIsBlock(true);\n//     }\n//   }\n//   resultBtnIsBlock(false); // Re-enable the button when valid values are entered\n// }\n\n// resultButton.addEventListener(`click`, mainController);\n// delayForm.addEventListener(`input`, changeController); // Use 'input' event for immediate validation\n\n// resultBtnIsBlock(true);\n\n// for (let pos=1; pos <= counter; pos+=1){\n//   let del = Number((inputDelay.value) + Number(pos-1) * inputStep.value)\n//   const promise = createPromise(pos, delay)\n//   promise .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   }); \n// }\n\nimport Notiflix from 'notiflix';\n\nconst resultButton = document.querySelector('.form > button');\nconst delayForm = document.querySelector('.form');\nconst delayFields = document.querySelectorAll('input');\nlet delayObject = {};\nlet timerId = { intervalId: 0, timeoutId: 0 };\n\nfunction getDelayObject() {\n  delayFields.forEach(elem => (delayObject[elem.getAttribute('name')] = elem.value));\n}\n\nfunction resultBtnIsBlock(value) {\n  resultButton.disabled = value;\n}\n\nfunction mainController(event) {\n  event.preventDefault();\n  getDelayObject();\n  cleaningTimer();\n  startTimeout();\n  resultBtnIsBlock(true);\n}\n\nfunction startTimeout() {\n  timerId.timeoutId = setTimeout(() => {\n    startInterval();\n  }, delayObject.delay);\n}\n\nfunction startInterval() {\n  timerId.intervalId = setInterval(() => {\n    createPromise();\n  }, delayObject.step);\n}\n\nfunction createPromise() {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve();\n      } else {\n        reject();\n      }\n    }, delayObject.step);\n  })\n    .then(() => {\n      console.log('✅ Fulfilled promise');\n      Notiflix.Notify.success(`Fulfilled promise in ${delayObject.step}ms`);\n    })\n    .catch(() => {\n      console.log('❌ Rejected promise');\n      Notiflix.Notify.failure(`Rejected promise in ${delayObject.step}ms`);\n    });\n}\n\nfunction cleaningTimer() {\n  clearTimeout(timerId.intervalId);\n  clearTimeout(timerId.timeoutId);\n}\n\nfunction changeController() {\n  for (const element of delayFields) {\n    if (element.value < 0 || element.value === '') {\n      return resultBtnIsBlock(true);\n    }\n  }\n  resultBtnIsBlock(false);\n}\n\nresultButton.addEventListener('click', mainController);\ndelayForm.addEventListener('input', changeController);\n\nresultBtnIsBlock(true);\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$resultButton","document","querySelector","$47d4ff9957288465$var$delayForm","$47d4ff9957288465$var$delayFields","querySelectorAll","$47d4ff9957288465$var$delayObject","$47d4ff9957288465$var$timerId","intervalId","timeoutId","$47d4ff9957288465$var$resultBtnIsBlock","value","disabled","addEventListener","event","preventDefault","forEach","elem","getAttribute","clearTimeout","setTimeout","setInterval","Promise","resolve","reject","shouldResolve","Math","random","step","then","console","log","$parcel$interopDefault","Notify","success","catch","failure","delay","element"],"version":3,"file":"03-promises.4af76091.js.map"}