{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,kBACtCC,EAAYF,SAASC,cAAc,SACzC,IAAIE,EAAcH,SAASI,iBAAiB,SACxCC,EAAc,GACdC,EAAe,EACfC,EAAU,CAAEC,WAAY,EAAGC,UAAW,GACtCC,GAAoB,EAYpBC,EAAmBC,GAAUb,EAAac,SAAWD,EAiBzD,IAAIE,EAAe,KACjBP,EAAQE,UAAYM,YAAW,KAC7BL,GAAoB,EACpBM,IACAC,GAAe,GACdZ,EAAYa,MAAM,EAKnBD,EAAgB,KAClBV,EAAQC,WAAaW,aAAY,KAC/BH,GAAe,GACdX,EAAYe,KAAK,EAKlBJ,EAAgB,KAElB,GADAV,IACIA,GAAgBD,EAAYgB,OAAQ,CAChBC,KAAKC,SAAW,IAEpCC,QAAQC,IAAI,MACZC,EAAA7B,GAAS8B,OAAOC,QACd,qBAAqBtB,QAAmBD,EAAYe,YAGtDI,QAAQC,IAAI,UACZC,EAAA7B,GAAS8B,OAAOE,QACd,oBAAoBvB,QAAmBD,EAAYe,U,MAIvDU,IACApB,GAAoB,EACpBC,GAAiB,E,EAIjBmB,EAAgB,KAClBC,aAAaxB,EAAQC,YACrBwB,cAAczB,EAAQE,UAAU,EAgBlCV,EAAakC,iBAAiB,SAvE9B,WACEC,MAAMC,iBACFzB,IAbJP,EAAYiC,SACVC,GAAShC,EAAYgC,EAAKC,aAAa,SAAWD,EAAKzB,QAgBzDN,EAAe,EACfwB,IACAhB,I,IAgEFZ,EAAU+B,iBAAiB,UAZ3B,WACE,IAAK,MAAMM,KAAWpC,EACpB,GAAIoC,EAAQ3B,MAAQ,GAAuB,KAAlB2B,EAAQ3B,MAC/B,OAAOD,GAAiB,GAG5B,OAAOA,GAAiB,E,IAU1BA,GAAiB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst resultButton = document.querySelector(`.form > button`);\nconst delayForm = document.querySelector(`.form`);\nlet delayFields = document.querySelectorAll(`input`);\nlet delayObject = {};\nlet amountRepeat = 0;\nlet timerId = { intervalId: 0, timeoutId: 0 };\nlet promisesExecuting = false; // Flag to track promise execution status\n\n// Create new Object with delay property\n\nlet getDelayObject = () => {\n  delayFields.forEach(\n    elem => (delayObject[elem.getAttribute(`name`)] = elem.value)\n  );\n};\n\n// Change button status\n\nlet resultBtnIsBlock = value => (resultButton.disabled = value);\n\n// Main mainController\n\nfunction mainController() {\n  event.preventDefault();\n  if (promisesExecuting) {\n    return; // If promises are already executing, do not proceed\n  }\n  getDelayObject();\n  amountRepeat = 0;\n  cleaningTimer();\n  startTimeout();\n}\n\n// First stage (first timeout delay)\n\nlet startTimeout = () => {\n  timerId.timeoutId = setTimeout(() => {\n    promisesExecuting = true; // Set the flag to indicate promises are executing\n    createPromise();\n    startInterval();\n  }, delayObject.delay);\n};\n\n// Second stage (setInterval)\n\nlet startInterval = () => {\n  timerId.intervalId = setInterval(() => {\n    createPromise();\n  }, delayObject.step);\n};\n\n// Check terms;\n\nlet createPromise = () => {\n  amountRepeat++;\n  if (amountRepeat <= delayObject.amount) {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      console.log(`ok`);\n      Notiflix.Notify.success(\n        `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    } else {\n      console.log(`not ok`);\n      Notiflix.Notify.failure(\n        `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    }\n  } else {\n    cleaningTimer();\n    promisesExecuting = false; // Reset the flag when all promises are executed\n    resultBtnIsBlock(false); // Enable the button when promises are done\n  }\n};\n\nlet cleaningTimer = () => {\n  clearTimeout(timerId.intervalId);\n  clearInterval(timerId.timeoutId);\n};\n\n// Check validation\n\nfunction changeController() {\n  for (const element of delayFields) {\n    if (element.value < 0 || element.value === '') {\n      return resultBtnIsBlock(true);\n    }\n  }\n  return resultBtnIsBlock(false);\n}\n\n// Event Listeners\n\nresultButton.addEventListener(`click`, mainController);\ndelayForm.addEventListener(`change`, changeController);\n\n// Main\n\nresultBtnIsBlock(true);\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$resultButton","document","querySelector","$47d4ff9957288465$var$delayForm","$47d4ff9957288465$var$delayFields","querySelectorAll","$47d4ff9957288465$var$delayObject","$47d4ff9957288465$var$amountRepeat","$47d4ff9957288465$var$timerId","intervalId","timeoutId","$47d4ff9957288465$var$promisesExecuting","$47d4ff9957288465$var$resultBtnIsBlock","value","disabled","$47d4ff9957288465$var$startTimeout","setTimeout","$47d4ff9957288465$var$createPromise","$47d4ff9957288465$var$startInterval","delay","setInterval","step","amount","Math","random","console","log","$parcel$interopDefault","Notify","success","failure","$47d4ff9957288465$var$cleaningTimer","clearTimeout","clearInterval","addEventListener","event","preventDefault","forEach","elem","getAttribute","element"],"version":3,"file":"03-promises.5982b069.js.map"}