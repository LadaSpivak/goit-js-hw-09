{"mappings":"iiBA8KA,IAAAA,EAAAC,EAAA,SAEMC,EAAeC,SAASC,cAAc,kBACtCC,EAAYF,SAASC,cAAc,SACnCE,EAAcH,SAASI,iBAAiB,SACxCC,EAAc,GAChBC,EAAe,EACbC,EAAU,CAAEC,WAAY,EAAGC,UAAW,GAQtCC,EAA0B,SAAAC,G,OAAUZ,EAAaa,SAAWD,C,EAWlE,IAAME,EAAe,WACnBN,EAAQE,UAAYK,YAAW,WAC7BC,IACAC,G,GACCX,EAAYY,M,EAGXD,EAAgB,WACpBT,EAAQC,WAAaU,aAAY,WAC/BH,G,GACCV,EAAYc,K,EAGXJ,EAAgB,aACpBT,GACoBD,EAAYe,OACRC,KAAKC,SAAW,IAEpCC,QAAQC,IAAI,MACZC,EAAA5B,GAAS6B,OAAOC,QACd,qBAAwCC,OAAnBtB,EAAa,QAAuBsB,OAAjBvB,EAAYc,KAAK,SAG3DI,QAAQC,IAAI,UACZC,EAAA5B,GAAS6B,OAAOG,QACd,oBAAuCD,OAAnBtB,EAAa,QAAuBsB,OAAjBvB,EAAYc,KAAK,QAI5DW,G,EAIEA,EAAc,WAClBC,aAAaxB,EAAQC,YACrBwB,cAAczB,EAAQE,U,EAYxBV,EAAakC,iBAAiB,SAxD9B,SAAwBC,GACtBA,EAAMC,iBACNzB,GAAwB,GATxBP,EAAYiC,SACV,SAAAC,G,OAAYhC,EAAYgC,EAAQC,aAAa,SAAWD,EAAQ1B,K,IAUlEL,EAAe,EACfwB,IACAjB,G,IAmDFX,EAAU+B,iBAAiB,UAV3B,W,IACOM,GAAa,EAAbC,GAAa,EAAbC,OAAaC,E,IAAlB,QAAKC,EAAAC,EAAiBzC,EAAW0C,OAAAC,cAA5BP,GAAAI,EAAAC,EAAaG,QAAAC,MAAbT,GAAa,EAAiB,CAA9B,IAAMF,EAANM,EAAahC,MAChB,GAAI0B,EAAQ1B,MAAQ,GAAuB,KAAlB0B,EAAQ1B,MAC/B,OAAOD,GAAwB,E,WAF9B8B,GAAa,EAAbC,EAAaQ,C,aAAbV,GAAa,MAAbK,EAAaM,QAAbN,EAAaM,Q,YAAbV,E,MAAAC,C,EAKL,OAAO/B,GAAwB,E,IAMjCA,GAAwB,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// const resultButton = document.querySelector(`.form > button`);\n// const delayForm = document.querySelector(`.form`);\n// let delayFields = document.querySelectorAll(`input`);\n// let delayObject = {};\n// let amountRepeat = 0;\n// let timerId = { intervalId: 0, timeoutId: 0 };\n\n// // Create new Object with delay property\n\n// let getDelayObject = () => {\n//   delayFields.forEach(\n//     elem => (delayObject[elem.getAttribute(`name`)] = elem.value)\n//   );\n// };\n\n// // Change button status\n\n// let resultBtnIsBlock = value => (resultButton.disabled = value);\n\n// // Main mainController\n\n// function mainController() {\n//   event.preventDefault();\n//   getDelayObject();\n//   amountRepeat = 0;\n//   cleaningTimer();\n//   startTimeout();\n// }\n\n// // First stage (first timeout dalay)\n\n// let startTimeout = () => {\n//   timerId.timeoutId = setTimeout(() => {\n//     createPromise();\n//     startInterval();\n//   }, delayObject.delay);\n// };\n\n// // Second stage (setInterval)\n\n// let startInterval = () => {\n//   timerId.intervalId = setInterval(() => {\n//     createPromise();\n//   }, delayObject.step);\n// };\n\n// // Check terms;\n\n// let createPromise = () => {\n//   amountRepeat++;\n//   if (amountRepeat <= delayObject.amount) {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       console.log(`ok`);\n//       Notiflix.Notify.success(\n//         `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     } else {\n//       console.log(`not ok`);\n//       Notiflix.Notify.failure(\n//         `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     }\n//   } else {\n//     cleaningTimer();\n//   }\n// };\n\n// let cleaningTimer = () => {\n//   clearTimeout(timerId.intervalId);\n//   clearInterval(timerId.timeoutId);\n// };\n\n// // Check validation\n\n// function changeController() {\n//   for (const element of delayFields) {\n//     if (element.value < 0 || element.value == ``) {\n//       return resultBtnIsBlock(true);\n//     }\n//   }\n//   return resultBtnIsBlock(false);\n// }\n\n// // Event Listeners\n\n// resultButton.addEventListener(`click`, mainController);\n// delayForm.addEventListener(`change`, changeController);\n\n// // Main\n\n// resultBtnIsBlock(true);\n\n// ****************************************************************************\n// import Notiflix from 'notiflix';\n\n// const resultButton = document.querySelector('.form > button');\n// const delayForm = document.querySelector('.form');\n// const delayFields = document.querySelectorAll('input');\n// const delayObject = {};\n// let amountRepeat = 0;\n// const timerId = { intervalId: 0, timeoutId: 0 };\n\n// const getDelayObject = () => {\n//   delayFields.forEach(\n//     element => (delayObject[element.getAttribute('name')] = element.value)\n//   );\n// };\n\n// const setResultButtonDisabled = value => (resultButton.disabled = value);\n\n// function mainController(event) {\n//   event.preventDefault();\n//   getDelayObject();\n//   amountRepeat = 0;\n//   clearTimers();\n//   startTimeout();\n// }\n\n// const startTimeout = () => {\n//   timerId.timeoutId = setTimeout(() => {\n//     createPromise();\n//     startInterval();\n//   }, delayObject.delay);\n// };\n\n// const startInterval = () => {\n//   timerId.intervalId = setInterval(() => {\n//     createPromise();\n//   }, delayObject.step);\n// };\n\n// const createPromise = () => {\n//   amountRepeat++;\n//   if (amountRepeat <= delayObject.amount) {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       console.log('ok');\n//       Notiflix.Notify.success(\n//         `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     } else {\n//       console.log('not ok');\n//       Notiflix.Notify.failure(\n//         `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n//       );\n//     }\n//   } else {\n//     clearTimers();\n//   }\n// };\n\n// const clearTimers = () => {\n//   clearTimeout(timerId.intervalId);\n//   clearInterval(timerId.timeoutId);\n// };\n\n// function changeController() {\n//   for (const element of delayFields) {\n//     if (element.value < 0 || element.value === '') {\n//       return setResultButtonDisabled(true);\n//     }\n//   }\n//   return setResultButtonDisabled(false);\n// }\n\n// resultButton.addEventListener('click', mainController);\n// delayForm.addEventListener('change', changeController);\n\n// setResultButtonDisabled(true);\n// ***********************************\n\nimport Notiflix from 'notiflix';\n\nconst resultButton = document.querySelector('.form > button');\nconst delayForm = document.querySelector('.form');\nconst delayFields = document.querySelectorAll('input');\nconst delayObject = {};\nlet amountRepeat = 0;\nconst timerId = { intervalId: 0, timeoutId: 0 };\n\nconst getDelayObject = () => {\n  delayFields.forEach(\n    element => (delayObject[element.getAttribute('name')] = element.value)\n  );\n};\n\nconst setResultButtonDisabled = value => (resultButton.disabled = value);\n\nfunction mainController(event) {\n  event.preventDefault();\n  setResultButtonDisabled(true); // Делаем кнопку неактивной\n  getDelayObject();\n  amountRepeat = 0;\n  clearTimers();\n  startTimeout();\n}\n\nconst startTimeout = () => {\n  timerId.timeoutId = setTimeout(() => {\n    createPromise();\n    startInterval();\n  }, delayObject.delay);\n};\n\nconst startInterval = () => {\n  timerId.intervalId = setInterval(() => {\n    createPromise();\n  }, delayObject.step);\n};\n\nconst createPromise = () => {\n  amountRepeat++;\n  if (amountRepeat <= delayObject.amount) {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      console.log('ok');\n      Notiflix.Notify.success(\n        `Fulfilled promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    } else {\n      console.log('not ok');\n      Notiflix.Notify.failure(\n        `Rejected promise ${amountRepeat} in ${delayObject.step}ms`\n      );\n    }\n  } else {\n    clearTimers();\n  }\n};\n\nconst clearTimers = () => {\n  clearTimeout(timerId.intervalId);\n  clearInterval(timerId.timeoutId);\n};\n\nfunction changeController() {\n  for (const element of delayFields) {\n    if (element.value < 0 || element.value === '') {\n      return setResultButtonDisabled(true);\n    }\n  }\n  return setResultButtonDisabled(false);\n}\n\nresultButton.addEventListener('click', mainController);\ndelayForm.addEventListener('change', changeController);\n\nsetResultButtonDisabled(true);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$resultButton","document","querySelector","$ce04d3a99e08e73b$var$delayForm","$ce04d3a99e08e73b$var$delayFields","querySelectorAll","$ce04d3a99e08e73b$var$delayObject","$ce04d3a99e08e73b$var$amountRepeat","$ce04d3a99e08e73b$var$timerId","intervalId","timeoutId","$ce04d3a99e08e73b$var$setResultButtonDisabled","value","disabled","$ce04d3a99e08e73b$var$startTimeout","setTimeout","$ce04d3a99e08e73b$var$createPromise","$ce04d3a99e08e73b$var$startInterval","delay","setInterval","step","amount","Math","random","console","log","$parcel$interopDefault","Notify","success","concat","failure","$ce04d3a99e08e73b$var$clearTimers","clearTimeout","clearInterval","addEventListener","event","preventDefault","forEach","element","getAttribute","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return"],"version":3,"file":"03-promises.6bf5d2b1.js.map"}